#include "driverControl.cpp"
#include "movement.hpp"
#include "sensing.hpp"
#include "sim.cpp"
#include "sensing.cpp"
#include "state.cpp"
#include "autonManagement.cpp"
#include "autonLinear.cpp"
#include "autonTurn.cpp"
#include "complexAuton.cpp"
#include "dist.cpp"
#include "pid.cpp"
#include "state.hpp"
#include "constants.cpp"
#include "nav.hpp"
#include "nav.cpp"
#include <cstdio>
#include <fstream>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>
#include <unistd.h>
// #include "simMain.hpp"
int i = 0;
std::ifstream inFile;
std::ofstream outFile;
std::string outputFile = "CG/data.txt";
std::ofstream ofs;
State state;
std::string star = "";
double r;
void cycle(State *state){
  i++;
  outFile.open(outputFile, std::ios_base::app);
  Movement::tick(state);
  
  // Simulate::step(state);
  double velL = Movement::velL(state, dltT);
  double velR = Movement::velR(state, dltT);
  state->dltRot[0] = (velL)*dltT/(RWheelToMotor);
  state->dltRot[1] = (velR)*dltT/(RWheelToMotor);
  state->dltAng = (velL*dltT-velR*dltT)/(RWheelToMotor*botWidth);
  state->dltRot[2] = state->dltAng *CWheelOffset;
  state->vel[0] = velL;
  state->vel[1] = velR;
  Sense::getPos(state);
  
  outFile << star+"time: " << i*1.0/20.0 << "\n";

  outFile << "posX: " << state->pos[0] << "\n";
  outFile << star+"posY: " << state->pos[1] << "\n";
  double angOut = fmod(state->pos[2], twoPi);
  if(angOut<0) angOut+=twoPi;
  outFile << "ang: " << angOut << "\n";
  outFile << "dist: " << state->posErr << "\n";

  outFile << "inputL: " << velL << "\n";
  outFile << "inputR: " << velR << "\n";
  if(!state->outputs.empty())
    for(int i = 0; i < (int)state->outputs.size(); i++) outFile << state->outputs[i]<<"\n";
  state->outputs.clear();
  // outFile << "inputC: " << state->voltDrive[2] << "\n";

  std::cout << std::flush;
  outFile.close();
  usleep(dltT*1000000);
}

int main() {

  std::vector<int> prevInput = {0,0};
  state.pos = {.5,.1,3*pi/4};
  
  ofs.open(outputFile, std::ofstream::out | std::ofstream::trunc);
  ofs.close();
  
  for(int i = 0; i<20; i++){cycle(&state);}
  // Movement::turn(pi, &state, 3, 3, 3, .5, .03);
  Movement::pursue(true, &state, {3,3,pi/4}, .3, false, 2, 4, 8);
  do {
    
    cycle(&state);
  }while (state.posErr>.01);
  // Nav::pursuit({0, .5, pi/2}, .3);
  // while(state.pos[2]<pi/8){
  //   r = Nav::_pursuit(state.pos);
  //   double diffDr = (r+rightOffset)/(r-leftOffset);
  
  //   state.voltDrive = {3*diffDr,3};
  //   if(fabs(diffDr)>1) state.voltDrive = {3,3/diffDr};
  //   cycle(&state);
  // }
  // Nav::pursuit({0, .5, -pi/2}, .5);
  // while(state.pos[0]>.2){
  //   r = Nav::_pursuit(state.pos);
  //   double diffDr = ( (r+rightOffset)/(r-leftOffset) );
  
  //   state.voltDrive = {-3*diffDr,-3};
  //   if(fabs(diffDr)>1) state.voltDrive = {-3,-3/diffDr};
  //   cycle(&state);
  // }


  std::vector<int> input = {0,0};
  // for(int i = 0; i<40; i++){cycle(&state);}


  //   state.voltDrive=Movement::drive(input, &state);
  //   cycle(&state);
  //   Movement::coast(&state);
  //   // do {
  //   //   cycle(&state);
  //   // }while (state.posErr>.03);
  // while(true){
  //   cycle(&state);
  //   if(state.vel[0]>.01){
  //     star = "*";
  //   }
  //   else star = "";
  // }

}

